{"ast":null,"code":"var _jsxFileName = \"/Users/oki-an/Desktop/project/react-next-nodebird/front/pages/index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ImgWrapper } from '../components/ImagesZoom/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); // 스크롤 내려서 끝까지 갔을 때 로딩하게 하기\n\n  useEffect(() => {\n    function onScroll() {\n      //현재스크롤위치, 화면에 보이는 영역높이, 스크롤총길이\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        if (hasMorePost) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          });\n        }\n      }\n    } // useEffect에서 window.addEventListener선언할 땐 꼭 리턴해서 리무브 해주기 안그러면 메모리에 쌓임\n\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 20\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 38\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","ImgWrapper","Home","dispatch","me","state","user","mainPosts","hasMorePost","post","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,UAAT,QAA2B,iCAA3B;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BZ,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACI,IAAlB,CAA9C;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,QAAQ,CAAC;AACLO,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH,GAJQ,EAIN,EAJM,CAAT,CALe,CAWf;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASiB,QAAT,GAAoB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,UAAGL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,KAA2DF,QAAQ,CAACC,eAAT,CAAyBE,YAAvF,EAAqG;AACjG,YAAGX,WAAH,EAAgB;AACZL,UAAAA,QAAQ,CAAC;AACLO,YAAAA,IAAI,EAAEV;AADD,WAAD,CAAR;AAGH;AACJ;AACJ,KAXW,CAYZ;;;AACAc,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC;AACA,WAAO,MAAM;AACTG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;AACH,KAFD;AAGH,GAjBQ,EAiBN,EAjBM,CAAT;AAoBA,sBACI,QAAC,SAAD;AAAA,eACKP,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADX,EAEKG,SAAS,CAACe,GAAV,CAAeb,IAAD,iBAAU,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACc,EAApB;AAAA;AAAA;AAAA;AAAA,YAAxB,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAtCD;;AAwCA,eAAerB,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ImgWrapper } from '../components/ImagesZoom/styles';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePost } = useSelector((state) => state.post);\n\n    useEffect(() => {\n        dispatch({\n            type: LOAD_POSTS_REQUEST,\n        });\n    }, []);\n\n    // 스크롤 내려서 끝까지 갔을 때 로딩하게 하기\n    useEffect(() => {\n        function onScroll() {\n            //현재스크롤위치, 화면에 보이는 영역높이, 스크롤총길이\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n            if(window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n                if(hasMorePost) {\n                    dispatch({\n                        type: LOAD_POSTS_REQUEST,\n                    });    \n                }\n            }\n        }\n        // useEffect에서 window.addEventListener선언할 땐 꼭 리턴해서 리무브 해주기 안그러면 메모리에 쌓임\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, []);\n\n    \n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n        </AppLayout>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}