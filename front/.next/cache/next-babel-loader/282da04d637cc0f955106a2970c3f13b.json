{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // 쪼갠 리듀서 합쳐주는 메소드\n\nimport { combineReducers } from 'redux'; // 쪼갠 리듀서 불러오기\n\nimport user from './user';\nimport post from './post'; // state에 들어간것은 기본state\n// (이전상태, 액션) => 다음상태를 만들어냄\n\nvar rootReducer = combineReducers({\n  // HYDRATE를 위해서 index추가한것(for 서버사이드렌더링을 위함)\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log(HYDRATE);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // 기본값이 없으면 에러남\n\n      default:\n        return state;\n    }\n  },\n  // initialState는 combineReducer가 알아서 넣어줌\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CACA;;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAGH,eAAe,CAAC;AAChC;AACAI,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,+CAAWM,KAAX,GAAqBC,MAAM,CAACI,OAA5B;AACJ;;AACA;AACI,eAAOL,KAAP;AANR;AAQH,GAX+B;AAYhC;AACAJ,EAAAA,IAAI,EAAJA,IAbgC;AAchCC,EAAAA,IAAI,EAAJA;AAdgC,CAAD,CAAnC;AAiBA,eAAeC,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n// 쪼갠 리듀서 합쳐주는 메소드\nimport { combineReducers } from 'redux';\n// 쪼갠 리듀서 불러오기\nimport user from './user';\nimport post from './post';\n\n// state에 들어간것은 기본state\n// (이전상태, 액션) => 다음상태를 만들어냄\nconst rootReducer = combineReducers({\n    // HYDRATE를 위해서 index추가한것(for 서버사이드렌더링을 위함)\n    index: (state = {}, action) => {\n        switch (action.type) {\n            case HYDRATE :\n                console.log(HYDRATE);\n                return {...state, ...action.payload};\n            // 기본값이 없으면 에러남\n            default :\n                return state;\n        }\n    },\n    // initialState는 combineReducer가 알아서 넣어줌\n    user,\n    post,\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}