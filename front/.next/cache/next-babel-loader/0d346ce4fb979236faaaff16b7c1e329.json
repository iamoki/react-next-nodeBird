{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // 스테이트를 바꾸고 싶을 때\n\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // 액션을 만들어서 이것을 디스패치\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n}; // state에 들어간것은 기본state\n// (이전상태, 액션) => 다음상태를 만들어냄\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log(HYDRATE);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: false // user: null,\n\n      });\n    // 기본값이 없으면 에러남\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-next-nodeBird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","changeNickname","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,UAAU,EAAE,KADV;AAEFD,IAAAA,IAAI,EAAE,IAFJ;AAGFE,IAAAA,UAAU,EAAE,EAHV;AAIFC,IAAAA,SAAS,EAAE;AAJT,GADW;AAOjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAE;AADT;AAPW,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;;AACA,MAAME,cAAc,GAAIH,IAAD,IAAU;AAC7B,SAAO;AACHC,IAAAA,IAAI,EAAE,iBADH;AAEHD,IAAAA;AAFG,GAAP;AAIH,CALD,C,CAOA;AACA;;;AACA,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKV,OAAL;AACIgB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AACA,6CAAWc,KAAX,GAAqBC,MAAM,CAACG,OAA5B;;AACJ,SAAK,QAAL;AACI,6CACOJ,KADP;AAEIZ,QAAAA,IAAI,kCACGY,KAAK,CAACZ,IADT;AAEAC,UAAAA,UAAU,EAAE,IAFZ;AAGAD,UAAAA,IAAI,EAAEa,MAAM,CAACN;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOK,KADP;AAEIX,QAAAA,UAAU,EAAE,KAFhB,CAGI;;AAHJ;AAKJ;;AACA;AACI,aAAOW,KAAP;AArBR;AAuBH,CAxBD;;AA0BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\n// 스테이트를 바꾸고 싶을 때\r\nconst initialState = {\r\n    user: {\r\n        isLoggedIn: false,\r\n        user: null,\r\n        signUpData: {},\r\n        loginData: {},\r\n    },\r\n    post: {\r\n        mainPosts: [],\r\n    }\r\n};\r\n\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type: 'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logoutAction = () => {\r\n    return {\r\n        type: 'LOG_OUT',\r\n    }\r\n}\r\n\r\n// 액션을 만들어서 이것을 디스패치\r\nconst changeNickname = (data) => {\r\n    return {\r\n        type: 'CHANGE_NICKNAME',\r\n        data,\r\n    }\r\n};\r\n\r\n// state에 들어간것은 기본state\r\n// (이전상태, 액션) => 다음상태를 만들어냄\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE :\r\n            console.log(HYDRATE);\r\n            return {...state, ...action.payload};\r\n        case 'LOG_IN' :\r\n            return {\r\n                ...state,\r\n                user : {\r\n                    ...state.user,\r\n                    isLoggedIn: true,\r\n                    user: action.data,\r\n                },\r\n            };\r\n        case 'LOG_OUT' :\r\n            return {\r\n                ...state,\r\n                isLoggedIn: false,\r\n                // user: null,\r\n            }\r\n        // 기본값이 없으면 에러남\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}