{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // 쪼갠 리듀서 합쳐주는 메소드\n\nimport { combineReducers } from 'redux'; // 쪼갠 리듀서 불러오기\n\nimport user from './user';\nimport post from './post'; // 스테이트를 바꾸고 싶을 때\n\nconst initialState = {\n  user: {},\n  post: {}\n}; // state에 들어간것은 기본state\n// (이전상태, 액션) => 다음상태를 만들어냄\n\nconst rootReducer = combineReducers({\n  // HYDRATE를 위해서 index추가한것(for 서버사이드렌더링을 위함)\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(HYDRATE);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // 기본값이 없으면 에러남\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-next-nodeBird/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CACA;;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAE,EADW;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB,C,CASA;AACA;;AACA,MAAME,WAAW,GAAGJ,eAAe,CAAC;AAChC;AACAK,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACA,+CAAWO,KAAX,GAAqBC,MAAM,CAACI,OAA5B;AACJ;;AACA;AACI,eAAOL,KAAP;AANR;AAQH,GAX+B;AAYhCL,EAAAA,IAZgC;AAahCC,EAAAA;AAbgC,CAAD,CAAnC;AAgBA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n// 쪼갠 리듀서 합쳐주는 메소드\r\nimport { combineReducers } from 'redux';\r\n// 쪼갠 리듀서 불러오기\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n// 스테이트를 바꾸고 싶을 때\r\nconst initialState = {\r\n    user: {\r\n        \r\n    },\r\n    post: {\r\n        \r\n    }\r\n};\r\n\r\n// state에 들어간것은 기본state\r\n// (이전상태, 액션) => 다음상태를 만들어냄\r\nconst rootReducer = combineReducers({\r\n    // HYDRATE를 위해서 index추가한것(for 서버사이드렌더링을 위함)\r\n    index: (state = {}, action) => {\r\n        switch (action.type) {\r\n            case HYDRATE :\r\n                console.log(HYDRATE);\r\n                return {...state, ...action.payload};\r\n            // 기본값이 없으면 에러남\r\n            default :\r\n                return state;\r\n        }\r\n    },\r\n    user,\r\n    post,\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}