{"ast":null,"code":"// configureStore를 만드는 법\n//next-redux-wrapper를 설치해 createWrapper를 가져올 수 있다. \nimport { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  // if(typeof action === 'function') {\n  //     return action(dispatch, getState);\n  // }\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const middlewares = [thunkMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer); // store.dispatch({\n  //     type: 'CHANGE_NICKNAME',\n  //     data: 'odokodok',\n  // })\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  // 아래 코드가 트루면 redux에 관해서 자세한 설명이 나온다.\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-next-nodeBird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","thunkMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA;AACA;AACA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACvE;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAND;;AAQA,MAAMG,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAG,CAACV,eAAD,EAAkBE,gBAAlB,CAApB;AACA,QAAMS,QAAQ,GAAG,QACXd,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CADI,GAEXX,mBAAmB,CAACH,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAFzB;AAGA,QAAME,KAAK,GAAGd,WAAW,CAACG,OAAD,EAAUU,QAAV,CAAzB,CALyB,CAMzB;AACA;AACA;AACA;;AACA,SAAOC,KAAP;AACH,CAXD;;AAaA,MAAMC,OAAO,GAAGlB,aAAa,CAACc,cAAD,EAAiB;AAC1C;AACAK,EAAAA,KAAK;AAFqC,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["// configureStore를 만드는 법\r\n//next-redux-wrapper를 설치해 createWrapper를 가져올 수 있다. \r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport reducer from '../reducers';\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    // if(typeof action === 'function') {\r\n    //     return action(dispatch, getState);\r\n    // }\r\n    console.log(action)\r\n    return next(action);\r\n}\r\n\r\nconst configureStore = () => {\r\n    const middlewares = [thunkMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middlewares))\r\n        : composeWithDevTools(applyMiddleware(...middlewares))\r\n    const store = createStore(reducer, enhancer);\r\n    // store.dispatch({\r\n    //     type: 'CHANGE_NICKNAME',\r\n    //     data: 'odokodok',\r\n    // })\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { \r\n    // 아래 코드가 트루면 redux에 관해서 자세한 설명이 나온다.\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}