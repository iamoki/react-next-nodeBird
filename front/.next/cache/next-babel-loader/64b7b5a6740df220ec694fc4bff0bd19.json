{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    // 다른정보와 합쳐서 주는것들은 대문자로 시작\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '닉네임1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy1'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy2'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy3'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 댓글1'\n    }, {\n      id: shortId.generate(),\n      User: {\n        nickname: 'bero'\n      },\n      content: '우와우와 댓글2'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // export const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\n// export const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\n// export const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n// export const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\n// export const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\n// export const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; // export const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\n// export const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\n// export const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\n// export const RETWEET_REQUEST = 'RETWEET_REQUEST';\n// export const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\n// export const RETWEET_FAILURE = 'RETWEET_FAILURE';\n// export const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\n// export const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\n// export const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제제'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제제'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","generate","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\n\nexport const initialState = {\n    mainPosts: [{\n        // 다른정보와 합쳐서 주는것들은 대문자로 시작\n        id: 1,\n        User: {\n            id: 1,\n            nickname: '닉네임1'\n        },\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\n        Images: [\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy1',\n            },\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy2',\n            },\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy3',\n            },\n        ],\n        Comments: [\n            {\n                id: shortId.generate(),\n                User: {\n                    nickname: 'nero',\n                },\n                content: '우와 댓글1',\n            },\n            {\n                id: shortId.generate(),\n                User: {\n                    nickname: 'bero',\n                },\n                content: '우와우와 댓글2',\n            }\n        ]\n    }],\n    imagePaths: [],\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n}\n\n// 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\n// export const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\n// export const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\n// export const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\n// export const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\n// export const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\n// export const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// export const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\n// export const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\n// export const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\n\n// export const RETWEET_REQUEST = 'RETWEET_REQUEST';\n// export const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\n// export const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\n// export const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\n// export const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\n// export const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n\nconst dummyPost = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '제제',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '제제',\n    },\n});\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null,\n            };\n        case ADD_POST_SUCCESS:\n            return {\n                ...state,\n                //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                addPostLoading: false,\n                addPostDone: true,\n            };\n        case ADD_POST_FAILURE:\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            };\n        case ADD_COMMENT_REQUEST:\n            return {\n                ...state,\n                addCommentLoading: true,\n                addCommentDone: false,\n                addCommentError: null,\n            };\n        case ADD_COMMENT_SUCCESS: {\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n            const post = { ...state.mainPosts[postIndex] };\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\n            const mainPosts = [...state.mainPosts];\n            mainPosts[postIndex] = post;\n            return {\n                ...state,\n                mainPosts,\n                addCommentLoading: false,\n                addCommentDone: true,\n            };\n        }\n        case ADD_COMMENT_FAILURE:\n            return {\n                ...state,\n                addCommentLoading: false,\n                addCommentError: action.error,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}