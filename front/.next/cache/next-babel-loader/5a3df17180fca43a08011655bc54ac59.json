{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loasPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: LOAD_POSTS_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000); // 포스트리듀서 조작부분\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // 유저리듀서 조작부분\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/sagas/post.js"],"names":["all","fork","put","delay","takeLatest","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","loadPostsAPI","data","get","loasPosts","action","id","generate","type","LOAD_POSTS_SUCCESS","content","LOAD_POSTS_TO_ME","err","LOAD_POSTS_FAILURE","response","addPostAPI","post","addPost","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","loadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n    ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST,\n    REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE,\n    LOAD_POSTS_REQUEST,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction loadPostsAPI(data) {\n    return axios.get('/api/posts', data);\n}\n\nfunction* loasPosts(action) {\n    try {\n        // const result = yield call(loadPostsAPI, action.data);\n        yield delay(1000);\n        const id = shortid.generate();\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put ({\n            type: LOAD_POSTS_TO_ME,\n            data: id,\n        });\n    } catch(err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        const id = shortid.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put ({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch(err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        // const result = yield call(removePostAPI, action.data);\n        yield delay(1000);\n        // 포스트리듀서 조작부분\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        // 유저리듀서 조작부분\n        yield put ({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n"]},"metadata":{},"sourceType":"module"}