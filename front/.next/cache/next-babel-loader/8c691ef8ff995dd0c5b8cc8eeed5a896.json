{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    // 다른정보와 합쳐서 주는것들은 대문자로 시작\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '닉네임1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Imaged: [{\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy1'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy2'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy3'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 댓글1'\n    }, {\n      User: {\n        nickname: 'bero'\n      },\n      content: '우와우와 댓글2'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n}; // 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\n\nvar ADD_POST = 'ADD_POST';\nexport var addPost = {\n  type: ADD_POST\n};\nvar dummyPost = {\n  id: 2,\n  content: '더미데이터',\n  User: {\n    id: 1,\n    nickname: '제제'\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts))\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-next-nodeBird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Imaged","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","dummyPost","Images","reducer","state","action"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACR;AACAC,IAAAA,EAAE,EAAE,CAFI;AAGRC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAHE;AAORC,IAAAA,OAAO,EAAE,uBAPD;AAQRC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EAAE;AADT,KADI,EAIJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAJI,EAOJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAPI,CARA;AAmBRC,IAAAA,QAAQ,EAAE,CACN;AACIL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KADM,EAON;AACIF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAPM;AAnBF,GAAD,CADa;AAmCxBI,EAAAA,UAAU,EAAE,EAnCY;AAoCxBC,EAAAA,SAAS,EAAE;AApCa,CAArB,C,CAuCP;;AACA,IAAMC,QAAQ,GAAG,UAAjB;AACA,OAAO,IAAMC,OAAO,GAAG;AACnBC,EAAAA,IAAI,EAAEF;AADa,CAAhB;AAGP,IAAMG,SAAS,GAAG;AACdZ,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,OAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdW,EAAAA,MAAM,EAAE,EAPM;AAQdP,EAAAA,QAAQ,EAAE;AARI,CAAlB;;AAWA,IAAMQ,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBjB,YAAyB;AAAA,MAAXkB,MAAW;;AAC9C,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKF,QAAL;AACI,6CACOM,KADP;AAEI;AACAhB,QAAAA,SAAS,GAAGa,SAAH,4BAAiBG,KAAK,CAAChB,SAAvB;AAHb;;AAMJ;AACI,aAAOgB,KAAP;AATR;AAWH,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    mainPosts: [{\r\n        // 다른정보와 합쳐서 주는것들은 대문자로 시작\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '닉네임1'\r\n        },\r\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n        Imaged: [\r\n            {\r\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy1',\r\n            },\r\n            {\r\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy2',\r\n            },\r\n            {\r\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy3',\r\n            },\r\n        ],\r\n        Comments: [\r\n            {\r\n                User: {\r\n                    nickname: 'nero',\r\n                },\r\n                content: '우와 댓글1',\r\n            },\r\n            {\r\n                User: {\r\n                    nickname: 'bero',\r\n                },\r\n                content: '우와우와 댓글2',\r\n            }\r\n        ]\r\n    }],\r\n    imagePaths: [],\r\n    postAdded: false,\r\n}\r\n\r\n// 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\r\nconst ADD_POST = 'ADD_POST';\r\nexport const addPost = {\r\n    type: ADD_POST,\r\n}\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: '더미데이터',\r\n    User: {\r\n        id: 1,\r\n        nickname: '제제',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}