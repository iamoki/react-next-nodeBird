{"ast":null,"code":"import { all, fork, put, delay, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid, { generate } from 'shortid';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000); // 포스트리듀서 조작부분\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    }); // 유저리듀서 조작부분\n\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/sagas/post.js"],"names":["all","fork","put","delay","takeLatest","throttle","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_REQUEST","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","shortid","generate","loadPostsAPI","data","get","loadPosts","action","id","type","err","response","addPostAPI","post","addPost","content","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, delay, takeLatest, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n    ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST,\n    REMOVE_POST_SUCCESS, REMOVE_POST_REQUEST, REMOVE_POST_FAILURE,\n    LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\nimport shortid, { generate } from 'shortid';\n\nfunction loadPostsAPI(data) {\n    return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n    try {\n        // const result = yield call(loadPostsAPI, action.data);\n        yield delay(1000);\n        const id = shortid.generate();\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10),\n        });\n    } catch(err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        const id = shortid.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put ({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch(err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction removePostAPI(data) {\n    return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n    try {\n        // const result = yield call(removePostAPI, action.data);\n        yield delay(1000);\n        // 포스트리듀서 조작부분\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        // 유저리듀서 조작부분\n        yield put ({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield throttle(2000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n"]},"metadata":{},"sourceType":"module"}