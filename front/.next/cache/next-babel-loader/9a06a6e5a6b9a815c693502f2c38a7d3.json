{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    // 다른정보와 합쳐서 주는것들은 대문자로 시작\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '닉네임1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy1'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy2'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy3'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 댓글1'\n    }, {\n      User: {\n        nickname: 'bero'\n      },\n      content: '우와우와 댓글2'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n}; // 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const addPost = {\n  type: ADD_POST_REQUEST\n};\nconst dummyPost = {\n  id: 2,\n  content: '더미데이터',\n  User: {\n    id: 1,\n    nickname: '제제'\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n        mainPosts: [dummyPost, ...state.mainPosts],\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPost","type","dummyPost","reducer","state","action","ADD_POST"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACR;AACAC,IAAAA,EAAE,EAAE,CAFI;AAGRC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAHE;AAORC,IAAAA,OAAO,EAAE,uBAPD;AAQRC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EAAE;AADT,KADI,EAIJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAJI,EAOJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAPI,CARA;AAmBRC,IAAAA,QAAQ,EAAE,CACN;AACIL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KADM,EAON;AACIF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAPM;AAnBF,GAAD,CADa;AAmCxBI,EAAAA,UAAU,EAAE,EAnCY;AAoCxBC,EAAAA,SAAS,EAAE;AApCa,CAArB,C,CAuCP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,OAAO,GAAG;AACnBC,EAAAA,IAAI,EAAEJ;AADa,CAAhB;AAGP,MAAMK,SAAS,GAAG;AACdd,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,OAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdE,EAAAA,MAAM,EAAE,EAPM;AAQdE,EAAAA,QAAQ,EAAE;AARI,CAAlB;;AAWA,MAAMS,OAAO,GAAG,CAACC,KAAK,GAAGlB,YAAT,EAAuBmB,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKK,QAAL;AACI,6CACOF,KADP;AAEI;AACAjB,QAAAA,SAAS,EAAE,CAACe,SAAD,EAAY,GAAGE,KAAK,CAACjB,SAArB,CAHf;AAIIS,QAAAA,SAAS,EAAE;AAJf;;AAMJ;AACI,aAAOQ,KAAP;AATR;AAWH,CAZD;;AAcA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    mainPosts: [{\n        // 다른정보와 합쳐서 주는것들은 대문자로 시작\n        id: 1,\n        User: {\n            id: 1,\n            nickname: '닉네임1'\n        },\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\n        Images: [\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy1',\n            },\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy2',\n            },\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy3',\n            },\n        ],\n        Comments: [\n            {\n                User: {\n                    nickname: 'nero',\n                },\n                content: '우와 댓글1',\n            },\n            {\n                User: {\n                    nickname: 'bero',\n                },\n                content: '우와우와 댓글2',\n            }\n        ]\n    }],\n    imagePaths: [],\n    postAdded: false,\n}\n\n// 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const addPost = {\n    type: ADD_POST_REQUEST,\n}\nconst dummyPost = {\n    id: 2,\n    content: '더미데이터',\n    User: {\n        id: 1,\n        nickname: '제제',\n    },\n    Images: [],\n    Comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST:\n            return {\n                ...state,\n                //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n                mainPosts: [dummyPost, ...state.mainPosts],\n                postAdded: true,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}