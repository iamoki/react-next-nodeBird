{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    // 다른정보와 합쳐서 주는것들은 대문자로 시작\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '닉네임1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy1'\n    }, {\n      id: shortId.generate(),\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy2'\n    }, {\n      id: shortId.generate(),\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy3'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'nero'\n      },\n      content: '우와 댓글1'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'bero'\n      },\n      content: '우와우와 댓글2'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // export const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\n// export const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\n// export const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n// export const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\n// export const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\n// export const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; // export const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\n// export const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\n// export const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\n// export const RETWEET_REQUEST = 'RETWEET_REQUEST';\n// export const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\n// export const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제제'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '제제'\n    }\n  };\n}; // reduce = 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  //immer설정\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // 내가원하는 포스트를 찾아서\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          }); // 그 포스트 제일 앞에 댓글넣어주기\n\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACR;AACAC,IAAAA,EAAE,EAAE,CAFI;AAGRC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAHE;AAORC,IAAAA,OAAO,EAAE,uBAPD;AAQRC,IAAAA,MAAM,EAAE,CACJ;AACIJ,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADR;AAEIC,MAAAA,GAAG,EAAE;AAFT,KADI,EAKJ;AACIN,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADR;AAEIC,MAAAA,GAAG,EAAE;AAFT,KALI,EASJ;AACIN,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADR;AAEIC,MAAAA,GAAG,EAAE;AAFT,KATI,CARA;AAsBRC,IAAAA,QAAQ,EAAE,CACN;AACIP,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADR;AAEIJ,MAAAA,IAAI,EAAE;AACFD,QAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADF;AAEFH,QAAAA,QAAQ,EAAE;AAFR,OAFV;AAMIC,MAAAA,OAAO,EAAE;AANb,KADM,EASN;AACIH,MAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADR;AAEIJ,MAAAA,IAAI,EAAE;AACFD,QAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADF;AAEFH,QAAAA,QAAQ,EAAE;AAFR,OAFV;AAMIC,MAAAA,OAAO,EAAE;AANb,KATM;AAtBF,GAAD,CADa;AA0CxBK,EAAAA,UAAU,EAAE,EA1CY;AA2CxBC,EAAAA,cAAc,EAAE,KA3CQ;AA4CxBC,EAAAA,WAAW,EAAE,KA5CW;AA6CxBC,EAAAA,YAAY,EAAE,IA7CU;AA8CxBC,EAAAA,iBAAiB,EAAE,KA9CK;AA+CxBC,EAAAA,cAAc,EAAE,KA/CQ;AAgDxBC,EAAAA,eAAe,EAAE,IAhDO;AAiDxBC,EAAAA,iBAAiB,EAAE,KAjDK;AAkDxBC,EAAAA,cAAc,EAAE,KAlDQ;AAmDxBC,EAAAA,eAAe,EAAE;AAnDO,CAArB,C,CAsDP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB,C,CAEP;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B,C,CAEP;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAC9BC,IAAAA,IAAI,EAAEX,gBADwB;AAE9BU,IAAAA,IAAI,EAAJA;AAF8B,GAAX;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACjCC,IAAAA,IAAI,EAAER,mBAD2B;AAEjCO,IAAAA,IAAI,EAAJA;AAFiC,GAAX;AAAA,CAAnB;;AAMP,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACH,IAAD;AAAA,SAAW;AACzB5B,IAAAA,EAAE,EAAE4B,IAAI,CAAC5B,EADgB;AAEzBG,IAAAA,OAAO,EAAEyB,IAAI,CAACzB,OAFW;AAGzBF,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAHmB;AAOzBE,IAAAA,MAAM,EAAE,EAPiB;AAQzBG,IAAAA,QAAQ,EAAE;AARe,GAAX;AAAA,CAAlB;;AAWA,IAAMyB,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD;AAAA,SAAW;AAC5B5B,IAAAA,EAAE,EAAEL,OAAO,CAACU,QAAR,EADwB;AAE5BF,IAAAA,OAAO,EAAEyB,IAFmB;AAG5B3B,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR;AAHsB,GAAX;AAAA,CAArB,C,CASA;;;AACA,IAAM+B,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBpC,YAAyB;AAAA,MAAXqC,MAAW;AAC9C;AACA,SAAOvC,OAAO,CAACsC,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC7B,YAAQD,MAAM,CAACN,IAAf;AACI,WAAKX,gBAAL;AACIkB,QAAAA,KAAK,CAAC3B,cAAN,GAAuB,IAAvB;AACA2B,QAAAA,KAAK,CAAC1B,WAAN,GAAoB,KAApB;AACA0B,QAAAA,KAAK,CAACzB,YAAN,GAAqB,IAArB;AACA;;AACJ,WAAKQ,gBAAL;AACIiB,QAAAA,KAAK,CAAC3B,cAAN,GAAuB,KAAvB;AACA2B,QAAAA,KAAK,CAAC1B,WAAN,GAAoB,IAApB;AACA0B,QAAAA,KAAK,CAACrC,SAAN,CAAgBsC,OAAhB,CAAwBN,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACA;;AACJ,WAAKR,gBAAL;AACIgB,QAAAA,KAAK,CAAC3B,cAAN,GAAuB,KAAvB;AACA2B,QAAAA,KAAK,CAACzB,YAAN,GAAqBwB,MAAM,CAACG,KAA5B;AACA;;AACJ,WAAKd,mBAAL;AACIY,QAAAA,KAAK,CAACxB,iBAAN,GAA0B,IAA1B;AACAwB,QAAAA,KAAK,CAACvB,cAAN,GAAuB,KAAvB;AACAuB,QAAAA,KAAK,CAACtB,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKW,mBAAL;AACIW,QAAAA,KAAK,CAACxB,iBAAN,GAA0B,KAA1B;AACAwB,QAAAA,KAAK,CAACvB,cAAN,GAAuB,IAAvB;AACAuB,QAAAA,KAAK,CAACrC,SAAN,GAAkBqC,KAAK,CAACrC,SAAN,CAAgBwC,MAAhB,CAAuB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAACxC,EAAF,KAASmC,MAAM,CAACP,IAAvB;AAAA,SAAvB,CAAlB;AACA;;AACJ,WAAKF,mBAAL;AACIU,QAAAA,KAAK,CAACxB,iBAAN,GAA0B,KAA1B;AACAwB,QAAAA,KAAK,CAACtB,eAAN,GAAwBqB,MAAM,CAACG,KAA/B;AACA;;AACJ,WAAKjB,mBAAL;AACIe,QAAAA,KAAK,CAACrB,iBAAN,GAA0B,IAA1B;AACAqB,QAAAA,KAAK,CAACpB,cAAN,GAAuB,KAAvB;AACAoB,QAAAA,KAAK,CAACnB,eAAN,GAAwB,IAAxB;AACA;;AACJ,WAAKK,mBAAL;AAA0B;AACtB;AACA,cAAMmB,IAAI,GAAGL,KAAK,CAACrC,SAAN,CAAgB2C,IAAhB,CAAqB,UAACF,CAAD;AAAA,mBAAOA,CAAC,CAACxC,EAAF,KAASmC,MAAM,CAACP,IAAP,CAAYe,MAA5B;AAAA,WAArB,CAAb,CAFsB,CAGtB;;AACAF,UAAAA,IAAI,CAAClC,QAAL,CAAc8B,OAAd,CAAsBL,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYzB,OAAb,CAAlC;AACAiC,UAAAA,KAAK,CAACrB,iBAAN,GAA0B,KAA1B;AACAqB,UAAAA,KAAK,CAACpB,cAAN,GAAuB,IAAvB;AACA,gBAPsB,CAQtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD,WAAKO,mBAAL;AACIa,QAAAA,KAAK,CAACrB,iBAAN,GAA0B,KAA1B;AACAqB,QAAAA,KAAK,CAACnB,eAAN,GAAwBkB,MAAM,CAACG,KAA/B;AACA;;AACJ;AACI;AAxDR;AA2DH,GA5Da,CAAd;AA8DH,CAhED;;AAkEA,eAAeL,OAAf","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n    mainPosts: [{\n        // 다른정보와 합쳐서 주는것들은 대문자로 시작\n        id: 1,\n        User: {\n            id: 1,\n            nickname: '닉네임1'\n        },\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\n        Images: [\n            {\n                id: shortId.generate(),\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy1',\n            },\n            {\n                id: shortId.generate(),\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy2',\n            },\n            {\n                id: shortId.generate(),\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy3',\n            },\n        ],\n        Comments: [\n            {\n                id: shortId.generate(),\n                User: {\n                    id: shortId.generate(),\n                    nickname: 'nero',\n                },\n                content: '우와 댓글1',\n            },\n            {\n                id: shortId.generate(),\n                User: {\n                    id: shortId.generate(),\n                    nickname: 'bero',\n                },\n                content: '우와우와 댓글2',\n            }\n        ]\n    }],\n    imagePaths: [],\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null,\n}\n\n// 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\n// export const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\n// export const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\n// export const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\n// export const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\n// export const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\n// export const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// export const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\n// export const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\n// export const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\n\n// export const RETWEET_REQUEST = 'RETWEET_REQUEST';\n// export const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\n// export const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: '제제',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '제제',\n    },\n});\n\n// reduce = 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성 지키면서)\nconst reducer = (state = initialState, action) => {\n    //immer설정\n    return produce(state, (draft) => {\n        switch (action.type) {\n            case ADD_POST_REQUEST:\n                draft.addPostLoading = true;\n                draft.addPostDone = false;\n                draft.addPostError = null;\n                break;\n            case ADD_POST_SUCCESS:\n                draft.addPostLoading = false;\n                draft.addPostDone = true;\n                draft.mainPosts.unshift(dummyPost(action.data));\n                break;\n            case ADD_POST_FAILURE:\n                draft.addPostLoading = false;\n                draft.addPostError = action.error;\n                break;\n            case REMOVE_POST_REQUEST:\n                draft.removePostLoading = true;\n                draft.removePostDone = false;\n                draft.removePostError = null;\n                break;\n            case REMOVE_POST_SUCCESS:\n                draft.removePostLoading = false;\n                draft.removePostDone = true;\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n                break;\n            case REMOVE_POST_FAILURE:\n                draft.removePostLoading = false;\n                draft.removePostError = action.error;\n                break;\n            case ADD_COMMENT_REQUEST:\n                draft.addCommentLoading = true;\n                draft.addCommentDone = false;\n                draft.addCommentError = null;\n                break;\n            case ADD_COMMENT_SUCCESS: {\n                // 내가원하는 포스트를 찾아서\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                // 그 포스트 제일 앞에 댓글넣어주기\n                post.Comments.unshift(dummyComment(action.data.content));\n                draft.addCommentLoading = false;\n                draft.addCommentDone = true;\n                break;\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n                // const post = { ...state.mainPosts[postIndex] };\n                // const mainPosts = [...state.mainPosts];\n                // mainPosts[postIndex] = post;\n                // return {\n                //     ...state,\n                //     mainPosts,\n                // };\n            }\n            case ADD_COMMENT_FAILURE:\n                draft.addCommentLoading = false;\n                draft.addCommentError = action.error;\n                break;\n            default:\n                break;\n        }\n\n    });\n\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}