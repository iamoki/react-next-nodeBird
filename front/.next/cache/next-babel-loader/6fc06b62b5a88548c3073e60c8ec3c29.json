{"ast":null,"code":"import { all, fork, put, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/sagas/post.js"],"names":["all","fork","put","delay","takeLatest","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_FAILURE","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_POST_TO_ME","shortid","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EACsBC,gBADtB,EACwCC,gBADxC,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAE8CC,mBAF9C,QAGO,kBAHP;AAIA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,OAAP,MAAoB,SAApB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOV,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMgB,EAAE,GAAGN,OAAO,CAACO,QAAR,EAAX;AACA,UAAMlB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEf,gBADA;AAENS,MAAAA,IAAI,EAAE;AACFI,QAAAA,EADE;AAEFG,QAAAA,OAAO,EAAEJ,MAAM,CAACH;AAFd;AAFA,KAAD,CAAT;AAOA,UAAMb,GAAG,CAAE;AACPmB,MAAAA,IAAI,EAAET;AADC,KAAF,CAAT;AAGH,GAdD,CAcE,OAAMW,GAAN,EAAW;AACT,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEd,gBADA;AAENQ,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,aAAT,CAAuBV,IAAvB,EAA6B;AACzB,SAAOV,KAAK,CAACW,IAAN,CAAY,aAAYD,IAAI,CAACW,MAAO,UAApC,EAA+CX,IAA/C,CAAP;AACH;;AAED,UAAUY,UAAV,CAAqBT,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEX,mBADA;AAENK,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAMQ,GAAN,EAAW;AACT,UAAMrB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEZ,mBADA;AAENM,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,YAAV,GAAyB;AACrB,QAAMxB,UAAU,CAACI,gBAAD,EAAmBS,OAAnB,CAAhB;AACH;;AAED,UAAUY,eAAV,GAA4B;AACxB,QAAMzB,UAAU,CAACO,mBAAD,EAAsBgB,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAM9B,GAAG,CAAC,CACNC,IAAI,CAAC2B,YAAD,CADE,EAEN3B,IAAI,CAAC4B,eAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, put, delay, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\n    ADD_COMMENT_FAILURE, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST\n} from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport shortid from 'shortid';\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        // const result = yield call(addPostAPI, action.data);\n        yield delay(1000);\n        const id = shortid.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put ({\n            type: ADD_POST_TO_ME,\n        });\n    } catch(err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction addCommentAPI(data) {\n    return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch(err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchAddComment),\n    ]);\n}\n\n"]},"metadata":{},"sourceType":"module"}