{"ast":null,"code":"var _jsxFileName = \"/Users/oki-an/Desktop/project/react-next-nodebird/front/pages/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ImgWrapper } from '../components/ImagesZoom/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts;\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []); // 스크롤 내려서 끝까지 갔을 때 로딩하게 하기\n\n  useEffect(function () {\n    function onScroll() {\n      //현재스크롤위치, 화면에 보이는 영역높이, 스크롤총길이\n      console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n\n      if (window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n        dispatch({\n          type: LOAD_POSTS_REQUEST\n        });\n      }\n    } // useEffect에서 window.addEventListener선언할 땐 꼭 리턴해서 리무브 해주기 안그러면 메모리에 쌓임\n\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 20\n    }, _this), mainPosts.map(function (post) {\n      return /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 38\n      }, _this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Home, \"THXEp8v9jaF8ytGRy9OXIKXvFXM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","ImgWrapper","Home","dispatch","state","user","me","post","mainPosts","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,UAAT,QAA2B,iCAA3B;;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACf,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,qBAAeC,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA1B;AAAA,MAAQC,EAAR,gBAAQA,EAAR;;AACA,sBAAsBV,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAAjC;AAAA,MAAQC,SAAR,iBAAQA,SAAR;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAJQ,EAIN,EAJM,CAAT,CALe,CAWf;;AACAN,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASgB,QAAT,GAAoB;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,OAAnB,EAA4BC,QAAQ,CAACC,eAAT,CAAyBC,YAArD,EAAmEF,QAAQ,CAACC,eAAT,CAAyBE,YAA5F;;AACA,UAAGL,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,KAA2DF,QAAQ,CAACC,eAAT,CAAyBE,YAAvF,EAAqG;AACjGf,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAET;AADD,SAAD,CAAR;AAGH;AACJ,KATW,CAUZ;;;AACAa,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC;AACA,WAAO,YAAM;AACTG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;AACH,KAFD;AAGH,GAfQ,EAeN,EAfM,CAAT;AAkBA,sBACI,QAAC,SAAD;AAAA,eACKJ,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,aADX,EAEKE,SAAS,CAACa,GAAV,CAAc,UAACd,IAAD;AAAA,0BAAU,QAAC,QAAD;AAAwB,QAAA,IAAI,EAAEA;AAA9B,SAAeA,IAAI,CAACe,EAApB;AAAA;AAAA;AAAA;AAAA,eAAV;AAAA,KAAd,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ;AAMH,CApCD;;GAAMpB,I;UACeP,W,EACFC,W,EACOA,W;;;KAHpBM,I;AAsCN,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { ImgWrapper } from '../components/ImagesZoom/styles';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts } = useSelector((state) => state.post);\n    \n    useEffect(() => {\n        dispatch({\n            type: LOAD_POSTS_REQUEST,\n        });\n    }, []);\n\n    // 스크롤 내려서 끝까지 갔을 때 로딩하게 하기\n    useEffect(() => {\n        function onScroll() {\n            //현재스크롤위치, 화면에 보이는 영역높이, 스크롤총길이\n            console.log(window.scrollY, document.documentElement.clientHeight, document.documentElement.scrollHeight);\n            if(window.scrollY + document.documentElement.clientHeight === document.documentElement.scrollHeight) {\n                dispatch({\n                    type: LOAD_POSTS_REQUEST,\n                });    \n            }\n        }\n        // useEffect에서 window.addEventListener선언할 땐 꼭 리턴해서 리무브 해주기 안그러면 메모리에 쌓임\n        window.addEventListener('scroll', onScroll);\n        return () => {\n            window.removeEventListener('scroll', onScroll);\n        };\n    }, []);\n\n    \n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n        </AppLayout>\n    );\n};\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}