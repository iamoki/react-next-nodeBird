{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nexport var initialState = {\n  mainPosts: [{\n    // 다른정보와 합쳐서 주는것들은 대문자로 시작\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '닉네임1'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy1'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy2'\n    }, {\n      src: 'https://dummyimage.com/200x200/000/fff&text=dummy3'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 댓글1'\n    }, {\n      User: {\n        nickname: 'bero'\n      },\n      content: '우와우와 댓글2'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; // 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = {\n  id: 2,\n  content: '더미데이터',\n  User: {\n    id: 1,\n    nickname: '제제'\n  },\n  Images: [],\n  Comments: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/oki-an/Desktop/project/react-next-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","reducer","state","action","error"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CAAC;AACR;AACAC,IAAAA,EAAE,EAAE,CAFI;AAGRC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAHE;AAORC,IAAAA,OAAO,EAAE,uBAPD;AAQRC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EAAE;AADT,KADI,EAIJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAJI,EAOJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAPI,CARA;AAmBRC,IAAAA,QAAQ,EAAE,CACN;AACIL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KADM,EAON;AACIF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAPM;AAnBF,GAAD,CADa;AAmCxBI,EAAAA,UAAU,EAAE,EAnCY;AAoCxBC,EAAAA,cAAc,EAAE,KApCQ;AAqCxBC,EAAAA,WAAW,EAAE,KArCW;AAsCxBC,EAAAA,YAAY,EAAE;AAtCU,CAArB,C,CAyCP;;AACA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAC9BC,IAAAA,IAAI,EAAER,gBADwB;AAE9BO,IAAAA,IAAI,EAAJA;AAF8B,GAAX;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACjCC,IAAAA,IAAI,EAAEL,mBAD2B;AAEjCI,IAAAA,IAAI,EAAJA;AAFiC,GAAX;AAAA,CAAnB;AAMP,IAAMG,SAAS,GAAG;AACdrB,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,OAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdE,EAAAA,MAAM,EAAE,EAPM;AAQdE,EAAAA,QAAQ,EAAE;AARI,CAAlB;;AAWA,IAAMgB,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBzB,YAAyB;AAAA,MAAX0B,MAAW;;AAC9C,UAAQA,MAAM,CAACL,IAAf;AACI,SAAKR,gBAAL;AACI,6CACOY,KADP;AAEIf,QAAAA,cAAc,EAAE,IAFpB;AAGIC,QAAAA,WAAW,EAAE,KAHjB;AAIIC,QAAAA,YAAY,EAAE;AAJlB;;AAMJ,SAAKE,gBAAL;AACI,6CACOW,KADP;AAEI;AACAxB,QAAAA,SAAS,GAAGsB,SAAH,4BAAiBE,KAAK,CAACxB,SAAvB,EAHb;AAIIS,QAAAA,cAAc,EAAE,KAJpB;AAKIC,QAAAA,WAAW,EAAE;AALjB;;AAOJ,SAAKI,gBAAL;AACI,6CACOU,KADP;AAEIf,QAAAA,cAAc,EAAE,KAFpB;AAGIE,QAAAA,YAAY,EAAEc,MAAM,CAACC;AAHzB;;AAKJ;AACI,aAAOF,KAAP;AAvBR;AAyBH,CA1BD;;AA4BA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n    mainPosts: [{\n        // 다른정보와 합쳐서 주는것들은 대문자로 시작\n        id: 1,\n        User: {\n            id: 1,\n            nickname: '닉네임1'\n        },\n        content: '첫 번째 게시글 #해시태그 #익스프레스',\n        Images: [\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy1',\n            },\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy2',\n            },\n            {\n                src: 'https://dummyimage.com/200x200/000/fff&text=dummy3',\n            },\n        ],\n        Comments: [\n            {\n                User: {\n                    nickname: 'nero',\n                },\n                content: '우와 댓글1',\n            },\n            {\n                User: {\n                    nickname: 'bero',\n                },\n                content: '우와우와 댓글2',\n            }\n        ]\n    }],\n    imagePaths: [],\n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n}\n\n// 변수로 액션값을 지정해주면 값을 재활용 할 수 있다.\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\n\nconst dummyPost = {\n    id: 2,\n    content: '더미데이터',\n    User: {\n        id: 1,\n        nickname: '제제',\n    },\n    Images: [],\n    Comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null,\n            }\n        case ADD_POST_SUCCESS:\n            return {\n                ...state,\n                //앞에 추가되는 포스터를 등록해야 게시글위에 올라간다. 뒤로하면 아래로 포스팅이 쌓임\n                mainPosts: [dummyPost, ...state.mainPosts],\n                addPostLoading: false,\n                addPostDone: true,\n            };\n        case ADD_POST_FAILURE:\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            }\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}