{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // 스테이트를 바꾸고 싶을 때\n\nvar initialState = {\n  user: {},\n  post: {}\n};\nexport var loginAction = function loginAction(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // 액션을 만들어서 이것을 디스패치\n// const changeNickname = (data) => {\n//     return {\n//         type: 'CHANGE_NICKNAME',\n//         data,\n//     }\n// };\n// state에 들어간것은 기본state\n// (이전상태, 액션) => 다음상태를 만들어냄\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log(HYDRATE);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n    // 기본값이 없으면 에러남\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/User/Desktop/react-next-nodeBird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload","isLoggedIn"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAEA;;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB;AASA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHD,IAAAA,IAAI,EAAJA;AAFG,GAAP;AAIH,CALM;AAOP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO;AACHD,IAAAA,IAAI,EAAE;AADH,GAAP;AAGH,CAJM,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AAClD,UAAQA,MAAM,CAACJ,IAAf;AACI,SAAKN,OAAL;AACIW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,OAAZ;AACA,6CAAWS,KAAX,GAAqBC,MAAM,CAACG,OAA5B;;AACJ,SAAK,QAAL;AACI,6CACOJ,KADP;AAEIP,QAAAA,IAAI,kCACGO,KAAK,CAACP,IADT;AAEAY,UAAAA,UAAU,EAAE,IAFZ;AAGAZ,UAAAA,IAAI,EAAEQ,MAAM,CAACL;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOI,KADP;AAEIP,QAAAA,IAAI,kCACGO,KAAK,CAACP,IADT;AAEAY,UAAAA,UAAU,EAAE,KAFZ;AAGAZ,UAAAA,IAAI,EAAE;AAHN;AAFR;AAQJ;;AACA;AACI,aAAOO,KAAP;AAxBR;AA0BH,CA3BD;;AA6BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\n// 스테이트를 바꾸고 싶을 때\r\nconst initialState = {\r\n    user: {\r\n        \r\n    },\r\n    post: {\r\n        \r\n    }\r\n};\r\n\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type: 'LOG_IN',\r\n        data,\r\n    }\r\n}\r\n\r\nexport const logoutAction = () => {\r\n    return {\r\n        type: 'LOG_OUT',\r\n    }\r\n}\r\n\r\n// 액션을 만들어서 이것을 디스패치\r\n// const changeNickname = (data) => {\r\n//     return {\r\n//         type: 'CHANGE_NICKNAME',\r\n//         data,\r\n//     }\r\n// };\r\n\r\n// state에 들어간것은 기본state\r\n// (이전상태, 액션) => 다음상태를 만들어냄\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE :\r\n            console.log(HYDRATE);\r\n            return {...state, ...action.payload};\r\n        case 'LOG_IN' :\r\n            return {\r\n                ...state,\r\n                user : {\r\n                    ...state.user,\r\n                    isLoggedIn: true,\r\n                    user: action.data,\r\n                },\r\n            };\r\n        case 'LOG_OUT' :\r\n            return {\r\n                ...state,\r\n                user : {\r\n                    ...state.user,\r\n                    isLoggedIn: false,\r\n                    user: null,\r\n                }\r\n            }\r\n        // 기본값이 없으면 에러남\r\n        default :\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}